#include<iostream>
using namespace std;
#include<string>

class Person
{
public:
	Person(string name, int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}
public:
	string m_Name;
	int m_Age;
};

//特定的数据类型，需要具体化的方式做特殊处理
template<typename T>
bool myCompare(T& a, T& b)
{
	if (a == b)
	{
		return true;
	}
	else
	{
		return false;
	}
}

//利用具体化Person的版本，实现代码，具体优化调用
template<> bool myCompare(Person &p1, Person &p2)
{
	if (p1.m_Name == p2.m_Name && p1.m_Age == p2.m_Age)
	{
		return true;
	}
	else
	{
		return false;
	}
}

void test01()
{
	int a = 10;
	int b = 20;

	bool ret = myCompare(a, b);

	if (ret)
	{
		cout << "a==b" << endl;
	}
	else
	{
		cout << "a!=b" << endl;
	}
}

void test02()
{
	Person p1("张三", 14);
	Person p2("李四", 15);

	bool ret = myCompare(p1, p2);

	if (ret)
	{
		cout << "p1 和 p2 姓名年龄相等！" << endl;
	}
	else
	{
		cout << "p1 和 p2 姓名年龄不相等！" << endl;
	}
}

int main()
{
	//test01();

	test02();

	system("pause");
	return 0;
}
