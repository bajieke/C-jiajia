#include<iostream>
using namespace std;

class Person
{
public:
	//无参构造函数（默认构造函数）
	Person()
	{
		m_Age = 0;
		cout << "person无参构造函数调用" << endl;
	}
	//有参构造函数
	Person(int a)
	{
		m_Age = a;
		cout << "person有参构造函数调用" << endl;
	}
	//拷贝构造函数
	Person(const Person& per)
	{
		cout << "person拷贝构造函数调用" << endl;
		//将参数中的对象的属性，拷贝到此对象的属性
		m_Age = per.m_Age;
		
	}
	~Person()
	{
		cout << "Person析构函数调用" << endl;
	}
public:
	int m_Age;
};

//构造函数的调用
void test01()
{
	//1.括号法
	Person p1;   //调用无参构造函数
	Person p2(10);	//调用有参构造函数
	Person p3(p2);	//调用拷贝构造函数

	//注意事项
	//调用默认构造函数不加（）
	//原因：会被认为是函数声明
	//Person p4();  //啥也没有调用
	//void func();


	cout << "p2 的年龄：" << p2.m_Age << endl;
	cout << "p3 的年龄：" << p3.m_Age << endl;

	//显示法
	Person p1;
	Person p2 = Person(10);   //有参构造函数，给匿名对象起名字p2
	Person p3 = Person(p2);   //拷贝构造函数

	//匿名对象
	Person(10);  //匿名对象(有参构造函数),匿名对象:当前行执行结束后，，系统立即回收匿名对象
	cout << "aaaa" << endl;					//构造完了马上析构
	 
	//不要用拷贝构造，初始化匿名函数
	//Person(p2);  //编译器认为 Person(p2)==Person p2;

	//隐式转化法
	Person p4 = 10;  //有参构造函数		Person p4 = Person(10)
	Person p5 = p4;  //拷贝构造函数		Person p5 = Person(p4);


}

int main()
{
	test01();

	system("pause");
	return 0;
}
