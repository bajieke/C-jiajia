#include<iostream>
using namespace std;
#include<string>

template<class T1,class T2>
class Person
{
public:
	Person(T1 name, T2 age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}
	void showPerson()
	{
		cout << "name:" << this->m_Name << "     age:" << this->m_Age << endl;
	}
public:
	T1 m_Name;
	T2 m_Age;
};


//1.指定传入的类型：直接显示对象的数据类型
void printPerson1(Person<string,int> &p)
{
	p.showPerson();
}

void test01()
{
	Person<string, int> p("孙悟空", 999);
	printPerson1(p);
}


//2.参数模板化：将对象中的参数直接变为模板进行传递
template<class T1,class T2>
void printPerson(Person<T1, T2>& p)
{
	p.showPerson();
	cout << typeid(T1).name() << endl;   //string...
	cout << typeid(T2).name() << endl;   //int 
}

void test02()
{
	Person<string, int> p("猪八戒", 888);
	printPerson(p);
}

//3.整个类模板化：将这个对象模型模板化进行传递
template<class T>
void printPerson3(T& p)
{
	p.showPerson();
	cout << typeid(T).name();
}

void test03()
{
	Person<string, int> p3("沙僧", 878);
	printPerson3(p3);
}

int main()
{
	//test01();
	//test02();
	test03();

	system("pause");
	return 0;
}
