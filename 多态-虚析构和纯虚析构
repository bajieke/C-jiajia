#include<iostream>
using namespace std;
#include<string>

class Animal
{
public:
	Animal()
	{
		cout << "Animal构造函数调用" << endl;
	}
	//virtual ~Animal()
	//{
	//	cout << "Animal~虚析构函数调用" << endl;
	//}
	
	//纯虚析构，有声明，也需要实现（防止有堆区，不释放）
	//有了纯虚析构以后，这个类也属于抽象类，无法实例化
	virtual ~Animal() = 0;
public:
	virtual void speak() = 0;
};

Animal::~Animal()
{
	cout << "Animal的纯虚析构调用" << endl;
}


class Cat :public Animal
{
public:
	Cat(string name)
	{
		m_Name = new string(name);
		cout << "Cat构造完成" << endl;
	}
	~Cat()
	{
		if (m_Name != NULL)
		{
			delete m_Name;
			m_Name = NULL;
			cout << "Cat~析构完成" << endl;
		}
	}
public:
	void speak()
	{
		cout << *m_Name << "在说话" << endl;
	}
public:
	string* m_Name;
};

void test01()
{
	Animal* animal = new Cat("花花");
	animal->speak();
	//调用父类析构函数时，不会调用子类析构函数
	//导致子类堆区内容无法释放
	delete animal;
}

int main()
{
	test01();

	system("pause");
	return 0;
}
