#include<iostream>
using namespace std;

class Person
{
public:
	Person()
	{
		cout << "Person的默认构造函数" << endl;
	}
	Person(int age,int height)
	{
		m_Age = age;
		m_Height = new int(height);
		cout << "Person的有参构造函数" << endl;
	}
	//系统的浅拷贝碰到成员中new开辟堆区时，出现问题
	//自己定义深拷贝解决问题
	Person(const Person& p)
	{
		m_Age = p.m_Age;
		//m_Height = p.m_Height;		//编译其默认实现代码，浅拷贝：堆区空间共用
		m_Height = new int(*p.m_Height);    //自己重新开辟内存，解决堆区空间共享，重复销毁问题
	}
	~Person()
	{
		//析构函数：将堆区的内存释放
		if (m_Height == NULL)
		{
			delete m_Height;
			m_Height = NULL;
		}
		cout << "Person的析构函数" << endl;
	}
public:
	int m_Age;
	int* m_Height = NULL;
};


//浅拷贝带来的问题：堆区内存重复释放	公用一块堆区
//利用深拷贝解决浅拷贝问题				分别使用使用各自堆区
void test01()
{
	Person p1(19,165);
	cout << "p1的年龄为：" << p1.m_Age << "  p1的身高为：" << *p1.m_Height << endl;

	Person p2(p1);
	cout << "p2的年龄为：" << p2.m_Age << "  p2的身高为：" << *p2.m_Height << endl;
}


int main()
{
	test01();


	system("pause");
	return 0;
}
