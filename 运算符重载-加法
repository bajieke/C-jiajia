#include<iostream>
using namespace std;

class Person
{
public:
	Person operator+(Person& p);
	Person addPerson(Person& p);
public:
	int m_A;
	int m_B;
};

//自己写函数，实现两个对象相加
Person Person::addPerson(Person& p)
{
	Person temp;
	temp.m_A = this->m_A + p.m_A;
	temp.m_B = this->m_B + p.m_B;
	return temp;					 //调用拷贝构造函数
}

Person Person::operator+(Person& p)
{
	Person temp;
	temp.m_A = this->m_A + p.m_A;
	temp.m_B = this->m_B + p.m_B;
	return temp;					 //调用拷贝构造函数
}

Person operator+(Person& p1, Person& p2)
{
	Person temp;
	temp.m_A = p1.m_A + p2.m_A;
	temp.m_B = p1.m_B + p2.m_B;
	return temp;					 //调用拷贝构造函数
}

Person operator+(Person& p, int num)
{
	Person temp;
	temp.m_A = p.m_A + num;
	temp.m_B = p.m_B + num;
	return temp;					 //调用拷贝构造函数
}

void test01()
{
	Person p1;
	p1.m_A = 10;
	p1.m_B = 10;

	Person p2;
	p2.m_A = 10;
	p2.m_B = 10;

	//1.自己定义
	Person p3=p2.addPerson(p1);
	//Person p3 = p1 + p2;
	cout << "addPerson :" << p3.m_A << " " << p3.m_B << endl;

	//2.成员函数重载
	Person p4 = p1.operator+(p2);
	//Person p4 = p1 + p2;
	cout << "成员函数 operator+ :" << p4.m_A << " " << p4.m_B << endl;

	//3.全局函数重载
	Person p5 = operator+(p1,p2);
	//Person p4 = p1 + p2;
	cout << "全局函数 operator+ :" << p5.m_A << " " << p5.m_B << endl;

	//运算符重载也可以发生函数重载
	Person p6 = p1 + 10;
	cout << "全局函数 operator+ :" << p6.m_A << " " << p6.m_B << endl;

}

int main()
{
	test01();

	system("pause");
	return 0;
}
